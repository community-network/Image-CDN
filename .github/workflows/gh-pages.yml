# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Add webp versions of the images
        run: |
          sudo apt install imagemagick
          
          # generate white versions
          generate_white_image () {
              find . -maxdepth 1 -type f -regex ".*\.\(webp\|jpg\|jpeg\|png\)" -exec mogrify -channel RGB -brightness-contrast 75x0 -path white/ {} \; -print
          }

          (cd weapons/bf6 && mkdir -p white && generate_white_image)
          (cd weapons/bf2042 && mkdir -p white && generate_white_image)
          (cd vehicles/bf6 && mkdir -p white && generate_white_image)
          (cd vehicles/bf2042 && mkdir -p white && generate_white_image)

          find . -type f -regex ".*\.\(webp\|jpg\|jpeg\|png\)" -exec mogrify -format webp {}  \; -print

      - name: Compress Images
        id: calibre
        uses: calibreapp/image-actions@1.4.1
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          compressOnly: true
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5
